syntax = "proto3";
option go_package = "/gen";


enum CommandType {
  CreateStore = 0;
}

message VoteRequest {
  string Id = 1;
  int64 Term = 2;
  string CandidateName = 3;
  int64 LastLogIndex = 4;
  int64 LastLogTerm = 5;
}

message VoteReply {
  string Id = 1;
  bool VoteGranted = 2;
  string CandidateName = 3;
  int64 Term = 4;
}


message LogEntry {
  int64 Term = 1;
  int64 Index = 2;
  bytes Command = 3;
  string CommandId = 4;
  CommandType CmdType = 5;
}

message AppendEntryRequest {
  string Id = 1;
  int64 Term = 2;
  Peer Leader = 3;
  int64 PrevLogIndex = 4;
  int64 PrevLogTerm = 5;
  repeated LogEntry Entries = 6;
  int64 LeaderCommit = 7;
  int64 NextIndex = 8;
}

message AppendEntryReply {
  string Id = 1;
  int64 Term = 2;
  bool Success = 3;
  int64 ConflictIndex = 4;
  int64 ConflictTerm = 5;
}

message Peer {
  string name = 1;
  string address = 2;
  int32  port = 3;
}

message NewPeerRequest {
  string Id = 1;
  Peer NewPeer = 2;
}

message NewPeerReply {
  string Id = 1;
}

message BootStrapRequest {
  string Id = 1;
}

message BootStrapReply {
  string Id = 1;
}

message RemovePeerRequest {
  string Id = 1;
  Peer peer = 2;
}

message RemovePeerReply {
  string Id = 1;
}

message StatusRequest {
  string Id = 1;
}

message StatusReply {
  string Id = 1;
  Peer server = 2;
  string Status = 3;
}

message ClusterStatusRequest {
  string Id = 1;
}

message ClusterStatusReply {
  string Id = 1;
  repeated StatusReply PeerStatus = 2;
}

message StoreCreateRequest {
  string Id = 1;
  string name = 2;
}

message StoreCreateReply {
  string Id = 1;
}

message CommandRequest {
  string Id = 1;
  bytes Args = 2;
  CommandType CmdType = 3;
}

message CommandReply {
  string Id = 1;
}

service YadosService {
  rpc RequestVotes(VoteRequest) returns (VoteReply) {}
  rpc AppendEntries(AppendEntryRequest) returns (AppendEntryReply) {}
  rpc AddMember(NewPeerRequest) returns (NewPeerReply) {}
  rpc RemovePeer(RemovePeerRequest) returns(RemovePeerReply) {}
  rpc PeerStatus(StatusRequest) returns (StatusReply) {}
  rpc ClusterStatus(ClusterStatusRequest) returns (ClusterStatusReply) {}
  rpc CreateStore(StoreCreateRequest) returns (StoreCreateReply) {}
  rpc RunCommand(CommandRequest) returns (CommandReply){}
}
