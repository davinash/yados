// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gen

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// YadosServiceClient is the client API for YadosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YadosServiceClient interface {
	RequestVotes(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteReply, error)
	AppendEntries(ctx context.Context, in *AppendEntryRequest, opts ...grpc.CallOption) (*AppendEntryReply, error)
	AddPeers(ctx context.Context, in *AddPeersRequest, opts ...grpc.CallOption) (*AddPeersReply, error)
	RemovePeer(ctx context.Context, in *RemovePeerRequest, opts ...grpc.CallOption) (*RemovePeerReply, error)
	PeerStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error)
	ClusterStatus(ctx context.Context, in *ClusterStatusRequest, opts ...grpc.CallOption) (*ClusterStatusReply, error)
	CreateStore(ctx context.Context, in *StoreCreateRequest, opts ...grpc.CallOption) (*StoreCreateReply, error)
	ListStores(ctx context.Context, in *ListStoreRequest, opts ...grpc.CallOption) (*ListStoreReply, error)
	DeleteStore(ctx context.Context, in *StoreDeleteRequest, opts ...grpc.CallOption) (*StoreDeleteReply, error)
	ExecuteQuery(ctx context.Context, in *ExecuteQueryRequest, opts ...grpc.CallOption) (*ExecuteQueryReply, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error)
	GetLeader(ctx context.Context, in *GetLeaderRequest, opts ...grpc.CallOption) (*GetLeaderReply, error)
}

type yadosServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewYadosServiceClient(cc grpc.ClientConnInterface) YadosServiceClient {
	return &yadosServiceClient{cc}
}

func (c *yadosServiceClient) RequestVotes(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteReply, error) {
	out := new(VoteReply)
	err := c.cc.Invoke(ctx, "/YadosService/RequestVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yadosServiceClient) AppendEntries(ctx context.Context, in *AppendEntryRequest, opts ...grpc.CallOption) (*AppendEntryReply, error) {
	out := new(AppendEntryReply)
	err := c.cc.Invoke(ctx, "/YadosService/AppendEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yadosServiceClient) AddPeers(ctx context.Context, in *AddPeersRequest, opts ...grpc.CallOption) (*AddPeersReply, error) {
	out := new(AddPeersReply)
	err := c.cc.Invoke(ctx, "/YadosService/AddPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yadosServiceClient) RemovePeer(ctx context.Context, in *RemovePeerRequest, opts ...grpc.CallOption) (*RemovePeerReply, error) {
	out := new(RemovePeerReply)
	err := c.cc.Invoke(ctx, "/YadosService/RemovePeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yadosServiceClient) PeerStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/YadosService/PeerStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yadosServiceClient) ClusterStatus(ctx context.Context, in *ClusterStatusRequest, opts ...grpc.CallOption) (*ClusterStatusReply, error) {
	out := new(ClusterStatusReply)
	err := c.cc.Invoke(ctx, "/YadosService/ClusterStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yadosServiceClient) CreateStore(ctx context.Context, in *StoreCreateRequest, opts ...grpc.CallOption) (*StoreCreateReply, error) {
	out := new(StoreCreateReply)
	err := c.cc.Invoke(ctx, "/YadosService/CreateStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yadosServiceClient) ListStores(ctx context.Context, in *ListStoreRequest, opts ...grpc.CallOption) (*ListStoreReply, error) {
	out := new(ListStoreReply)
	err := c.cc.Invoke(ctx, "/YadosService/ListStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yadosServiceClient) DeleteStore(ctx context.Context, in *StoreDeleteRequest, opts ...grpc.CallOption) (*StoreDeleteReply, error) {
	out := new(StoreDeleteReply)
	err := c.cc.Invoke(ctx, "/YadosService/DeleteStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yadosServiceClient) ExecuteQuery(ctx context.Context, in *ExecuteQueryRequest, opts ...grpc.CallOption) (*ExecuteQueryReply, error) {
	out := new(ExecuteQueryReply)
	err := c.cc.Invoke(ctx, "/YadosService/ExecuteQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yadosServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error) {
	out := new(QueryReply)
	err := c.cc.Invoke(ctx, "/YadosService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yadosServiceClient) GetLeader(ctx context.Context, in *GetLeaderRequest, opts ...grpc.CallOption) (*GetLeaderReply, error) {
	out := new(GetLeaderReply)
	err := c.cc.Invoke(ctx, "/YadosService/GetLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YadosServiceServer is the server API for YadosService service.
// All implementations must embed UnimplementedYadosServiceServer
// for forward compatibility
type YadosServiceServer interface {
	RequestVotes(context.Context, *VoteRequest) (*VoteReply, error)
	AppendEntries(context.Context, *AppendEntryRequest) (*AppendEntryReply, error)
	AddPeers(context.Context, *AddPeersRequest) (*AddPeersReply, error)
	RemovePeer(context.Context, *RemovePeerRequest) (*RemovePeerReply, error)
	PeerStatus(context.Context, *StatusRequest) (*StatusReply, error)
	ClusterStatus(context.Context, *ClusterStatusRequest) (*ClusterStatusReply, error)
	CreateStore(context.Context, *StoreCreateRequest) (*StoreCreateReply, error)
	ListStores(context.Context, *ListStoreRequest) (*ListStoreReply, error)
	DeleteStore(context.Context, *StoreDeleteRequest) (*StoreDeleteReply, error)
	ExecuteQuery(context.Context, *ExecuteQueryRequest) (*ExecuteQueryReply, error)
	Query(context.Context, *QueryRequest) (*QueryReply, error)
	GetLeader(context.Context, *GetLeaderRequest) (*GetLeaderReply, error)
	mustEmbedUnimplementedYadosServiceServer()
}

// UnimplementedYadosServiceServer must be embedded to have forward compatible implementations.
type UnimplementedYadosServiceServer struct {
}

func (UnimplementedYadosServiceServer) RequestVotes(context.Context, *VoteRequest) (*VoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVotes not implemented")
}
func (UnimplementedYadosServiceServer) AppendEntries(context.Context, *AppendEntryRequest) (*AppendEntryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}
func (UnimplementedYadosServiceServer) AddPeers(context.Context, *AddPeersRequest) (*AddPeersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPeers not implemented")
}
func (UnimplementedYadosServiceServer) RemovePeer(context.Context, *RemovePeerRequest) (*RemovePeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePeer not implemented")
}
func (UnimplementedYadosServiceServer) PeerStatus(context.Context, *StatusRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeerStatus not implemented")
}
func (UnimplementedYadosServiceServer) ClusterStatus(context.Context, *ClusterStatusRequest) (*ClusterStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterStatus not implemented")
}
func (UnimplementedYadosServiceServer) CreateStore(context.Context, *StoreCreateRequest) (*StoreCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStore not implemented")
}
func (UnimplementedYadosServiceServer) ListStores(context.Context, *ListStoreRequest) (*ListStoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStores not implemented")
}
func (UnimplementedYadosServiceServer) DeleteStore(context.Context, *StoreDeleteRequest) (*StoreDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStore not implemented")
}
func (UnimplementedYadosServiceServer) ExecuteQuery(context.Context, *ExecuteQueryRequest) (*ExecuteQueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteQuery not implemented")
}
func (UnimplementedYadosServiceServer) Query(context.Context, *QueryRequest) (*QueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedYadosServiceServer) GetLeader(context.Context, *GetLeaderRequest) (*GetLeaderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeader not implemented")
}
func (UnimplementedYadosServiceServer) mustEmbedUnimplementedYadosServiceServer() {}

// UnsafeYadosServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YadosServiceServer will
// result in compilation errors.
type UnsafeYadosServiceServer interface {
	mustEmbedUnimplementedYadosServiceServer()
}

func RegisterYadosServiceServer(s grpc.ServiceRegistrar, srv YadosServiceServer) {
	s.RegisterService(&YadosService_ServiceDesc, srv)
}

func _YadosService_RequestVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YadosServiceServer).RequestVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YadosService/RequestVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YadosServiceServer).RequestVotes(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YadosService_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YadosServiceServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YadosService/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YadosServiceServer).AppendEntries(ctx, req.(*AppendEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YadosService_AddPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YadosServiceServer).AddPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YadosService/AddPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YadosServiceServer).AddPeers(ctx, req.(*AddPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YadosService_RemovePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YadosServiceServer).RemovePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YadosService/RemovePeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YadosServiceServer).RemovePeer(ctx, req.(*RemovePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YadosService_PeerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YadosServiceServer).PeerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YadosService/PeerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YadosServiceServer).PeerStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YadosService_ClusterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YadosServiceServer).ClusterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YadosService/ClusterStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YadosServiceServer).ClusterStatus(ctx, req.(*ClusterStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YadosService_CreateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YadosServiceServer).CreateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YadosService/CreateStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YadosServiceServer).CreateStore(ctx, req.(*StoreCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YadosService_ListStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YadosServiceServer).ListStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YadosService/ListStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YadosServiceServer).ListStores(ctx, req.(*ListStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YadosService_DeleteStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YadosServiceServer).DeleteStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YadosService/DeleteStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YadosServiceServer).DeleteStore(ctx, req.(*StoreDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YadosService_ExecuteQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YadosServiceServer).ExecuteQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YadosService/ExecuteQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YadosServiceServer).ExecuteQuery(ctx, req.(*ExecuteQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YadosService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YadosServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YadosService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YadosServiceServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YadosService_GetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YadosServiceServer).GetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YadosService/GetLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YadosServiceServer).GetLeader(ctx, req.(*GetLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// YadosService_ServiceDesc is the grpc.ServiceDesc for YadosService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YadosService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "YadosService",
	HandlerType: (*YadosServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVotes",
			Handler:    _YadosService_RequestVotes_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _YadosService_AppendEntries_Handler,
		},
		{
			MethodName: "AddPeers",
			Handler:    _YadosService_AddPeers_Handler,
		},
		{
			MethodName: "RemovePeer",
			Handler:    _YadosService_RemovePeer_Handler,
		},
		{
			MethodName: "PeerStatus",
			Handler:    _YadosService_PeerStatus_Handler,
		},
		{
			MethodName: "ClusterStatus",
			Handler:    _YadosService_ClusterStatus_Handler,
		},
		{
			MethodName: "CreateStore",
			Handler:    _YadosService_CreateStore_Handler,
		},
		{
			MethodName: "ListStores",
			Handler:    _YadosService_ListStores_Handler,
		},
		{
			MethodName: "DeleteStore",
			Handler:    _YadosService_DeleteStore_Handler,
		},
		{
			MethodName: "ExecuteQuery",
			Handler:    _YadosService_ExecuteQuery_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _YadosService_Query_Handler,
		},
		{
			MethodName: "GetLeader",
			Handler:    _YadosService_GetLeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
